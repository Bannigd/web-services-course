#+TITLE:Веб-сервис -- интерфейс к нейросети
* Часть 1. Собираем прототип.

В первой части необходимо выбрать библиотеку/фреймворк для написания
прототипа, придумать основной функционал, методы (API) и реализовать их.

** Что используем
Основным фреймворком для написания прототипа будет =Flask=, который, как
я понял, может использоваться для написания логики (WEB API), так и для
генерации самой HTML-страницы

Веб-сервис будет являться интерфейсом к нейросети
[[https://fusionbrain.ai][Kandinskiy]], которая предоставляет
возможность генерации картинок по текстовому описанию.

** Первоначальная настройка работы с Fusion Brain API

1. Необходимо зарегистрироваться на сайте https://fusionbrain.ai и во
   вкладке =API= создать новый ключ. Сгенерируется 2 ключа: =API key= и
   =Secret key=, оба будут необходимы при формировании запросов к
   сервису по =API=.

2. В документации есть пример на =python=
   https://fusionbrain.ai/docs/doc/api-dokumentaciya/, с помощью
   которого можно проверить возможность отправлять и получать запросы.

** Этапы взаимодействия с сервисом

*** Указание ключей

Отправка HTTP-запросов всегда должна сопровождаться указанием заголовков =X-Key= и  =X-Secret=. Пример запроса через =curl=:

   #+begin_src shell
curl --location 'https://api-key.fusionbrain.ai/key/api/v1/pipelines' \
--header 'X-Key: Key <API>' \
--header 'X-Secret: Secret <Secret>'
   #+end_src
  
*** Получить =pipeline_id=.
   Документация описывает этот шаг, как обращение к доступных моделям и выбор Kandinskiy, но по факту доступен только он,
   зато мы получаем конкретный =uuid= модели, который будет использоваться при отправке запроса.

   Чтобы получить =uuid= модели, необходимо составить GET-запрос по URL https://api-key.fusionbrain.ai/key/api/v1/pipelines.  Пример отправки такого запроса показан выше, ответ будет выглядеть следующим образом:

   #+begin_src json
    {
        "id": "<id>",
        "name": "Kandinsky",
        "nameEn": "Kandinsky",
        "description": "",
        "descriptionEn": "",
        "tags": [],
        "version": 3.1,
        "status": "ACTIVE",
        "type": "TEXT2IMAGE",
        "createdDate": "2025-03-19T12:33:58.844786Z",
        "lastModified": "2025-04-16T10:01:32.398993Z"
    }
   #+end_src

   Для составления запроса на генерацию изображения необходимо будет запомнить =id=.

*** Отправить запрос на генерацию изображения.
Все предварительные действия (создание API ключа и получение =id= модели) сделаны, можно приступать к формированию запроса к нейросети.
 
**** Структура запроса

На данный момент через API можно отправлять запросы только к модели =text2image=. Для этого необходимо отправить =POST=-запрос на URL: https://api-key.fusionbrain.ai/key/api/v1/pipeline/run.

Основное поле запроса выглядит следующим образом:

#+begin_src json
{
  "type": "GENERATE", 
  "style": "string",
  "width": 1024,
  "height": 1024,
  "numImages": 1,
  "negativePromptDecoder": "яркие цвета, кислотность, высокая контрастность",
  "generateParams": {
    "query": "Пушистый кот в очках"
  }
}
#+end_src

****  Описание полей:

   1. =type= -- режим генерации. Доступно только значение =generate=: создание изображений с нуля на основе текстового описания.
   2. =style= (optional) -- стиль изображения. Получение актуального списка стилей осуществляется по URL: [[https://cdn.fusionbrain.ai/static/styles/key]]. По этой ссылке можно выбрать только 4 стиля: "DEFAULT" (без стиля), "Kandinskiy", "UHD" и "ANIME", хотя на сайте их сильно больше.
   3. =width= -- ширина изображения (в пикселях)
   4. =height= -- высота изображения (в пикселях)
   5. =numImages= -- количество изображений. Сейчас доступна генерация только одного изображения
   6. =negativePromptDecoder= (optional) -- в поле можно прописать, какие цвета и приёмы модель не должна использовать при генерации изображения.
   7. =generateParams=: видимо обертка для расширения функционала
      - =query= -- поле запроса. Допускается русский, английский или любой другой язык (по документации), также emoji. Максимальный размер -- 1000 символов.

Вспомним, что нужно также указать API ключи и id модели, и получим следующим готовый запрос:

#+begin_src shell
curl --location 'https://api-key.fusionbrain.ai/key/api/v1/pipeline/run' \
--header 'X-Key: Key <API>' \
--header 'X-Secret: Secret <SECRET>' \
--form 'params="{\"type\": \"GENERATE\", 
\"numImages\": 1,
 \"width\": 128,
 \"height\": 128,
 \"generateParams\":
 {
\"query\": \"Пушистый кот в очках\"
}
}";type=application/json' \
--form 'pipeline_id="<id>"'
#+end_src

**** Ответ

В ответ мы получим информацию с =uuid=, который указывает на запущенный процесс, он понадобится для получения самого
изображения. Выглядит, например, так:

#+begin_src json
  {
    "status":"INITIAL",
    "uuid":"<uuid>",
    "status_time":17
  }
#+end_src

*** Отправить запрос для получения готового изображения

Последний шаг работы с API -- получить сгенерированное изображение. Отправляем простой GET-запрос с указанием =uuid=, которй получили на прошлом шаге:

#+begin_src shell
  curl --location 'https://api-key.fusionbrain.ai/key/api/v1/pipeline/status/<uuid>' \
--header 'X-Key: Key <API>' \
--header 'X-Secret: Secret <SECRET>' \
#+end_src

Так как генерация занимает какое-то время, ответ необязательно будет содержать само изображение. Пример соответствующего ответа:

#+begin_src json
  {
      "uuid": "<uuid>",
      "status": "INITIAL"
  }
#+end_src

Здесь =uuid= имеет такое же значение, как указанное при запросе. Когда поле =status= будет иметь значение "DONE", то мы получим и само изображение:
#+begin_src json
    {
      "uuid": "<uuid>",
      "status": "DONE",
      "result": {
          "files": [
              "<image>"
          ],
          "censored": false
      },
      "generationTime": 16
  }
#+end_src

Изображение доставляется в кодированном виде в  =Base64=, поэтому предварительно нужно будет их декодировать (например с помощью консольной команды =base64= или одноименной стандартной python библиотеки).

На этом работа с Fusion Brain API для нейросети Kandinksiy заканчивается.
